response <- POST("https://api.openai.com/v1/chat/completions",
add_headers(`Authorization` = paste("Bearer", "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"),
`Content-Type` = "application/json"),
body = toJSON(list(`prompt` = prompt,
`max_tokens` = 60)),
encode = "json")
if (http_status(response)$message == "OK") {
result <- fromJSON(content(response, "text", encoding = "UTF-8"))
return(result$choices[[1]]$text)
} else {
return("API request failed")
}
}
interpret_headers <- function(file) {
headers <- read_headers(file)
prompt <- paste("Describe the following data column headers:", paste(headers, collapse=", "))
description <- openai_prompt(prompt)
# Splitting the result assuming the model would return the descriptions separated by periods
descriptions <- strsplit(description, "\\.")[[1]]
# In case the model returns fewer descriptions than the number of headers
if (length(descriptions) < length(headers)) {
descriptions <- c(descriptions, rep(NA, length(headers) - length(descriptions)))
}
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
descriptions <- interpret_headers(file_path)
print(descriptions)
library(httr)
library(jsonlite)
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
openai_prompt <- function(prompt) {
response <- POST("https://api.openai.com/v1/chat/completions",
add_headers(`Authorization` = paste("Bearer", "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"),
`Content-Type` = "application/json"),
body = toJSON(list(`prompt` = prompt,
`model` = "gpt-3.5-turbo",
`max_tokens` = 60)),
encode = "json")
if (http_status(response)$message == "OK") {
result <- fromJSON(content(response, "text", encoding = "UTF-8"))
return(result$choices[[1]]$text)
} else {
return("API request failed")
}
}
interpret_headers <- function(file) {
headers <- read_headers(file)
prompt <- paste("Describe the following data column headers:", paste(headers, collapse=", "))
description <- openai_prompt(prompt)
# Splitting the result assuming the model would return the descriptions separated by periods
descriptions <- strsplit(description, "\\.")[[1]]
# In case the model returns fewer descriptions than the number of headers
if (length(descriptions) < length(headers)) {
descriptions <- c(descriptions, rep(NA, length(headers) - length(descriptions)))
}
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
descriptions <- interpret_headers(file_path)
print(descriptions)
library(httr)
library(jsonlite)
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
openai_prompt <- function(prompt) {
response <- POST("https://api.openai.com/v1/chat/completions",
add_headers(`Authorization` = paste("Bearer", "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"),
`Content-Type` = "application/json"),
body = toJSON(list(`prompt` = prompt,
`model` = "gpt-3.5-turbo",
`max_tokens` = 60)),
encode = "json")
if (http_status(response)$message == "OK") {
result <- fromJSON(content(response, "text", encoding = "UTF-8"))
return(result$choices[[1]]$text)
} else {
return("API request failed")
}
}
interpret_headers <- function(file) {
headers <- read_headers(file)
prompt <- paste("Describe the following data column headers:", paste(headers, collapse=", "))
description <- openai_prompt(prompt)
# Splitting the result assuming the model would return the descriptions separated by periods
descriptions <- strsplit(description, "\\.")[[1]]
# In case the model returns fewer descriptions than the number of headers
if (length(descriptions) < length(headers)) {
descriptions <- c(descriptions, rep(NA, length(headers) - length(descriptions)))
}
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
descriptions <- interpret_headers(file_path)
print(descriptions)
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
library(httr)
library(jsonlite)
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer", "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"),
+                              `Content-Type` = "application/json")
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
library(httr)
library(jsonlite)
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer", "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"),
`Content-Type` = "application/json")
body <- toJSON(list(`model` = "gpt-3.5-turbo",
`prompt` = prompt,
`max_tokens` = 60), auto_unbox = TRUE)
response <- RETRY("POST", url, auth_header, body = body, encode = "json", times = 3)
print(content(response, "text"))  # print the response
result <- fromJSON(content(response, "text"))
return(result$choices[[1]]$text)
}
>
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
library(httr)
library(jsonlite)
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer", "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"),
`Content-Type` = "application/json")
body <- toJSON(list(`model` = "gpt-3.5-turbo",
`prompt` = prompt,
`max_tokens` = 60), auto_unbox = TRUE)
response <- RETRY("POST", url, auth_header, body = body, encode = "json", times = 3)
print(content(response, "text"))  # print the response
result <- fromJSON(content(response, "text"))
return(result$choices[[1]]$text)
}
interpret_headers <- function(file) {
headers <- read_headers(file)
descriptions <- sapply(headers, function(header) {
description <- openai_prompt(paste("Describe the following data column header:", header))
return(description)
})
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
descriptions <- interpret_headers(file_path)
library(httr)
library(jsonlite)
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer", "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"),
`Content-Type` = "application/json")
body <- toJSON(list(`model` = "gpt-3.5-turbo",
`prompt` = prompt,
`max_tokens` = 60), auto_unbox = TRUE)
response <- POST(url, headers = auth_header, body = body, encode = "json")
if (http_status(response)$message == "OK") {
result <- fromJSON(content(response, "text"))
return(result$choices[[1]]$text)
} else {
return("API request failed")
}
}
interpret_headers <- function(file) {
headers <- read_headers(file)
descriptions <- sapply(headers, function(header) {
description <- openai_prompt(paste("Describe the following data column header:", header))
return(description)
})
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
descriptions <- interpret_headers(file_path)
print(descriptions)
library(httr)
library(jsonlite)
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer", "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"),
`Content-Type` = "application/json")
body <- toJSON(list(`model` = "gpt-3.5-turbo",
`prompt` = prompt,
`max_tokens` = 60))
response <- RETRY("POST", url, auth_header, body = body, encode = "json", times = 3)
print(content(response, "text"))  # print the response
result <- fromJSON(content(response, "text"))
return(result$choices[[1]]$text)
interpret_headers <- function(file) {
headers <- read_headers(file)
descriptions <- sapply(headers, function(header) {
description <- openai_prompt(paste("Describe the following data column header:", header))
return(description)
})
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
descriptions <- interpret_headers(file_path)
print(descriptions)
library(httr)
library(jsonlite)
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer", "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"),
`Content-Type` = "application/json")
body <- toJSON(list(`model` = "gpt-3.5-turbo",
`prompt` = prompt,
`max_tokens` = 60))
response <- RETRY("POST", url, auth_header, body = body, encode = "json", times = 3)
print(content(response, "text"))  # print the response
result <- fromJSON(content(response, "text"))
return(result$choices[[1]]$text)}
interpret_headers <- function(file) {
headers <- read_headers(file)
descriptions <- sapply(headers, function(header) {
description <- openai_prompt(paste("Describe the following data column header:", header))
return(description)
})
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
descriptions <- interpret_headers(file_path)
library(httr)
library(jsonlite)
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer", "YOUR_API_KEY"),
`Content-Type` = "application/json")
body <- toJSON(list(`model` = "gpt-3.5-turbo",
`prompt` = prompt,
`max_tokens` = 60))
response <- POST(url, headers = auth_header, body = body, encode = "json")
print(content(response, "text"))  # print the response
result <- fromJSON(content(response, "text"))
return(result$choices[[1]]$text)
}
interpret_headers <- function(file) {
headers <- read_headers(file)
descriptions <- sapply(headers, function(header) {
description <- openai_prompt(paste("Describe the following data column header:", header))
return(description)
})
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/path/to/your/file.csv"
headers <- read_headers(file_path)
library(httr)
library(jsonlite)
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer", "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"),
`Content-Type` = "application/json")
body <- toJSON(list(`model` = "gpt-3.5-turbo",
`prompt` = prompt,
`max_tokens` = 60))
response <- POST(url, headers = auth_header, body = body, encode = "json")
print(content(response, "text"))  # print the response
result <- fromJSON(content(response, "text"))
return(result$choices[[1]]$text)
}
interpret_headers <- function(file) {
headers <- read_headers(file)
descriptions <- sapply(headers, function(header) {
description <- openai_prompt(paste("Describe the following data column header:", header))
return(description)
})
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
descriptions <- interpret_headers(file_path)
print(descriptions)
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer" "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"),
library(httr)
library(jsonlite)
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer", "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"),
`Content-Type` = "application/json")
body <- toJSON(list(`model` = "gpt-3.5-turbo",
`prompt` = prompt,
`max_tokens` = 60))
response <- POST(url, headers = auth_header, body = body, encode = "json")
print(content(response, "text"))  # print the response
result <- fromJSON(content(response, "text"))
return(result$choices[[1]]$text)
}
interpret_headers <- function(file) {
headers <- read_headers(file)
descriptions <- sapply(headers, function(header) {
description <- openai_prompt(paste("Describe the following data column header:", header))
return(description)
})
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
descriptions <- interpret_headers(file_path)
print(descriptions)
library(httr)
library(jsonlite)
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer", "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"),
`Content-Type` = "application/json")
body <- toJSON(list(`model` = "gpt-3.5-turbo",
`prompt` = prompt,
`max_tokens` = 60))
response <- POST(url, headers = auth_header, body = body, encode = "json")
print(content(response, "text"))  # print the response
result <- fromJSON(content(response, "text"))
return(result$choices[[1]]$text)
}
interpret_headers <- function(file) {
headers <- read_headers(file)
descriptions <- sapply(headers, function(header) {
description <- openai_prompt(paste("Describe the following data column header:", header))
return(description)
})
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
descriptions <- interpret_headers(file_path)
print(descriptions)
library(httr)
library(jsonlite)
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer", "hH9EY0PtJRyQn8NuaKV6T3BlbkFJ4NFyChnFYPqXTpD9fifj"),
`Content-Type` = "application/json")
body <- toJSON(list(`model` = "gpt-3.5-turbo",
`prompt` = prompt,
`max_tokens` = 60))
response <- POST(url, headers = auth_header, body = body, encode = "json")
print(content(response, "text"))  # print the response
result <- fromJSON(content(response, "text"))
return(result$choices[[1]]$text)
}
interpret_headers <- function(file) {
headers <- read_headers(file)
descriptions <- sapply(headers, function(header) {
description <- openai_prompt(paste("Describe the following data column header:", header))
return(description)
})
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
descriptions <- interpret_headers(file_path)
print(descriptions)
##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
View(openai_prompt)
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer", "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"),
`Content-Type` = "application/json")
body <- toJSON(list(`model` = "gpt-3.5-turbo",
`prompt` = prompt,
`max_tokens` = 60))
response <- POST(url, headers = auth_header, body = body, encode = "json")
print(content(response, "text"))  # print the response
result <- fromJSON(content(response, "text"))
return(result$choices[[1]]$text)
}
interpret_headers <- function(file) {
headers <- read_headers(file)
descriptions <- sapply(headers, function(header) {
description <- openai_prompt(paste("Describe the following data column header:", header))
return(description)
})
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
descriptions <- interpret_headers(file_path)
print(descriptions)
##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
read_headers <- function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
headers <- colnames(data)
return(headers)
}
openai_prompt <- function(prompt) {
url <- "https://api.openai.com/v1/chat/completions"
auth_header <- add_headers(`Authorization` = paste("Bearer", "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"),
`Content-Type` = "application/json")
body <- toJSON(list(`model` = "gpt-3.5-turbo",
`prompt` = prompt,
`max_tokens` = 60))
response <- POST(url, headers = auth_header, body = body, encode = "json")
print(content(response, "text"))  # print the response
result <- fromJSON(content(response, "text"))
return(result$choices[[1]]$text)
}
interpret_headers <- function(file) {
headers <- read_headers(file)
descriptions <- sapply(headers, function(header) {
description <- openai_prompt(paste("Describe the following data column header:", header))
return(description)
})
names(descriptions) <- headers
return(descriptions)
}
file_path <- "/Users/tutg/Documents/DataSciComp/Random_Forest_Rangers/data/sdy180/resultfiles/mbaa_result.csv"
headers <- read_headers(file_path)
print(headers)
descriptions <- interpret_headers(file_path)
print(descriptions)
##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
